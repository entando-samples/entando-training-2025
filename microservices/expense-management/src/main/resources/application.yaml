server:
  port: 8081

spring:
  datasource:
    driver-class-name: org.postgresql.Driver
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    database: POSTGRESQL
    show-sql: true
    properties:
      hibernate.id.new_generator_mappings: true
      hibernate.connection.provider_disables_autocommit: true
      hibernate.cache.use_query_cache: false
      hibernate.generate_statistics: false
      hibernate.format_sql: true


  security:
    application:
      name: springboot-keycloak
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI:http://localhost:9080/auth/realms/entando-dev}
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

jwt:
  auth:
    converter:
      resource-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID:internal}
      principal-attribute: preferred_username

logging:
  level:
    org.springframework.security: DEBUG


# Swagger/OpenAPI configurations
springdoc:
  swagger-ui:
    oauth:
      client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID:internal}
      client-secret:
      use-pkce-with-authorization-code-grant: true
  oauth-flow:
    authorizationUrl: ${KEYCLOAK_AUTH_URL:http://localhost:9080/auth}/realms/${KEYCLOAK_REALM:entando-dev}/protocol/openid-connect/auth
    tokenUrl: ${KEYCLOAK_AUTH_URL:http://localhost:9080/auth}/realms/${KEYCLOAK_REALM:entando-dev}/protocol/openid-connect/token


# CORS Configurations
app:
  allowed-api-origin: "*"
